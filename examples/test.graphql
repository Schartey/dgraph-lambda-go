type Credentials {
    id: ID!
    firebaseId: String!
}

type User @lambdaOnMutate(add: true, update: true, delete: true) {
    userID: ID!
    credentials: Credentials!
    name: String!
    lastSignIn: DateTime @search(by: [year])
    """
    @middleware(["ignored"])
    """
    recentScores: [Float]
    likes: Int @deprecated(reason: "Use Reputation instead")
    reputation: Int @lambda
    rank: Int @lambda
    """
    @middleware(["admin"])
    """
    active: Boolean @lambda
}

enum Tag {
    GraphQL
    Database
    Question
}

interface Post {
    id: ID!
    title: String!
    text: String
    datePublished: DateTime
    tags: [Tag!]!
    author: Author!
    additionalInfo: String @lambda
}

type Author @secret(field: "pwd") {
    id: ID!
    name: String!
    posts: [Post] @hasInverse(field: author)
    recentlyLiked: [Post]
    friends: [Author]
}

interface Fruit {
    id: ID!
    price: Int!
}

type Apple implements Fruit {
    id: ID!
    price: Int!
    color: String!
}

type Banana implements Fruit {
    id: ID!
    price: Int!
}

input AppleInput {
    price: Int!
    color: String!
}

input BananaInput {
    price: Int!
}

type Question implements Post {
    id: ID!
    title: String!
    text: String
    datePublished: DateTime
    tags: [Tag!]!
    author: Author!
    additionalInfo: String
}

type Comment implements Post {
    id: ID!
    title: String!
    text: String
    datePublished: DateTime
    commentsOn: Post!
    tags: [Tag!]!
    author: Author!
    additionalInfo: String
}

interface Shape {
    id: ID!
    shape: String!
}

interface Color {
    id: ID!
    color: String!
}

type Figure implements Shape & Color @generate(
    query: {
        get: false,
        query: true,
        aggregate: false
    },
    mutation: {
        add: true,
        delete: false
    },
    subscription: false
) {
    id: ID!
    shape: String!
    color: String!
    size: Int! @lambda
}

enum Category {
  Fish
  Amphibian
  Reptile
  Bird
  Mammal
  InVertebrate
}

interface Animal {
  id: ID!
  category: Category @search
}

type Dog implements Animal {
  id: ID!
  breed: String @search
  category: Category @search
}

type Parrot implements Animal {
  id: ID!
  repeatsWords: [String]
  category: Category @search
}

type Cheetah implements Animal {
  id: ID!
  speed: Float
  category: Category @search
}

type Human {
  name: String!
  pets: [Animal!]!
}

union HomeMember = Dog | Parrot | Human

type Zoo {
  id: ID!
  animals: [Animal]
  city: String
}

type Home {
  id: ID!
  address: String
  members: [HomeMember]
}

type Hotel @lambdaOnMutate(add: true, update: true, delete: true) {
  id: String! @id
  name: String!
  location: Point
  area: Polygon
}

type Query {
    getApples: [Apple] @lambda
    """
    @middleware(["user", "admin"])
    """
    getTopAuthors(id: ID!): [Author] @lambda
    """
    @middleware(["user"])
    """
    getHotelByName(name: String!): Hotel @lambda
}

type Mutation {
    """
    @middleware(["admin"])
    """
    newAuthor(name: String!): ID! @lambda
}